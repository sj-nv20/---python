#Python for Beginner 제4장_05_1

#비트 연산자


##비트 연산자의 종류
&       비트 논리곱(and)            둘 다 1이면 1
|       비트 논리합(or)             둘 중 하나만 1이면 1
^       비트 논리적 배타합(xor)     둘이 같으면 0, 다르면 1
~       비트 부정                   1은 0으로, 0은 1로 변경
<<      비트 이동(왼쪽)             비트를 왼쪽으로 시프트(Shift)
>>      비트 이동(오른쪽)           비트를 오른쪽으로 시프트(Shift)

##비트 논리곱과 비트 논리합 연산자

##비트 논리곱(&)
##논리곱(and)는 그 결과가 참,거짓으로 나오지만, 비트 논리곱(&)는 수행한 결과가 나온다
##비트 논리곱의 예
A       B       A&B
0       0       0
0       1       0
1       0       0
1       1       1

10 & 7 [10진수] => 1010 & 0111 [2진수]
결과 :  0010 [2진수]  => 2 [10진수]

##두 수의 자릿수가 다를 때는 빈자리에 0을 채운 후 비트 논리곱 연산을 한다
##0과 비트 논리곱을 수행하면 어떤 숫자든 무조건 0이 나온다

print(10&7)             #2
print(123&456)          #72
print(0xFFFF&0x0000)    #0

##비트 논리합(|)
##비트 논리합의 예
A       B       A|B
0       0       0
0       1       1
1       0       1
1       1       1

10 | 7 [10진수] => 1010 | 0111 [2진수]
결과 : 1 1 1 1 [2진수]  =>  15 [10진수]

print(10|7)             #15 
print(123|456)          #507
print(0xFFFF|0x0000)    #65535[10진수]
print(hex(0xFFFF|0x0000))  #0xffff[16진수]

##비트 배타적 논리합(^)
##비트 배타적 논리합은 두 값이 다르면 참(1), 두 값이 같으면 거짓(0)이 나온다
##비트 배타적 논리합의 예
A       B       A^B
0       0       0
0       1       1
1       0       1
1       1       0

10 | 7 [10진수] => 1010 | 0111 [2진수]

print(10^7)             #13
print(123^456)          #435
print(0xFFFF^0x0000)    #65535

##비트 부정 연산자(또는 보수 연산자)
##두 수를 연산하는 것이 아니라, 하나만 가지고 각 비트를 반대로 만드는 연산
##즉 모든 0은 1로, 1은 0으로 바꾸어 준다
##해당값의 음수값을 찾고사 할 때 사용 -> 비트 부정을 수행한 후 1을 더하면 된다

a = 12345
print(~a)           #-12346     1의보수
print(~a + 1)       #-12345     2의보수